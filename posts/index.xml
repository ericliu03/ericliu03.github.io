<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yang&#39;s Blog</title>
    <link>https://ericliu03.github.io/posts/</link>
    <description>Recent content in Posts on Yang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Sep 2019 20:09:42 -0700</lastBuildDate>
    
	<atom:link href="https://ericliu03.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Leetcode 138]: Copy List with Random Pointer</title>
      <link>https://ericliu03.github.io/posts/2019/09/lc_138_copy_list_with_random_pointer/</link>
      <pubDate>Mon, 16 Sep 2019 20:09:42 -0700</pubDate>
      
      <guid>https://ericliu03.github.io/posts/2019/09/lc_138_copy_list_with_random_pointer/</guid>
      <description>Question Leetcode 138: Copy List with Random Pointer
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.
Note:  You must return the copy of the given head as a reference to the cloned list. Node definition:  class Node: def __init__(self, val, next, random): self.val = val self.</description>
    </item>
    
    <item>
      <title>[Leetcode 450] Delete Node in a BST</title>
      <link>https://ericliu03.github.io/posts/2019/05/lc_450_delete_node_in_a_bst/</link>
      <pubDate>Fri, 31 May 2019 15:22:33 -0700</pubDate>
      
      <guid>https://ericliu03.github.io/posts/2019/05/lc_450_delete_node_in_a_bst/</guid>
      <description>Question Leetcode 450: Delete Node in a BST
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.
Basically, the deletion can be divided into two stages:
 Search for a node to remove. If the node is found, delete the node.  Note: Time complexity should be O(height of tree).</description>
    </item>
    
    <item>
      <title>[Leetcode 785] Is Graph Bipartite</title>
      <link>https://ericliu03.github.io/posts/2019/05/lc_785_is_graph_bipartite/</link>
      <pubDate>Fri, 17 May 2019 11:51:24 -0700</pubDate>
      
      <guid>https://ericliu03.github.io/posts/2019/05/lc_785_is_graph_bipartite/</guid>
      <description>Question Leetcode 785: Is Graph Bipartite?
Given an undirected graph, return true if and only if it is bipartite.
Recall that a graph is bipartite if we can split it&amp;rsquo;s set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.
The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.</description>
    </item>
    
    <item>
      <title>[Leetcode 560] Subarray Sum Equals K</title>
      <link>https://ericliu03.github.io/posts/2019/05/560_subarray_sum_equals_k/</link>
      <pubDate>Tue, 14 May 2019 11:23:20 -0700</pubDate>
      
      <guid>https://ericliu03.github.io/posts/2019/05/560_subarray_sum_equals_k/</guid>
      <description>Question Leetcode 560: Subarray Sum Equals K
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.
Note:  The length of the array is in range [1, 20,000]. The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].  Examples Example 1:
Input:nums = [1,1,1], k = 2 Output: 2  Solution Method 1 (TLE) 我一开始想到的解法是使用一个存了dict的array，记录下每个位置上出现的所有可能的sum的数量。这样进行到每一位的时候只需要看一下他前面那个位置的dict，就能得到包含当前位置数字所有可能出现的sum。</description>
    </item>
    
    <item>
      <title>[Leetcode 975] Odd Even Jump</title>
      <link>https://ericliu03.github.io/posts/2019/05/lc_975_odd_even_jump/</link>
      <pubDate>Fri, 10 May 2019 09:59:57 -0700</pubDate>
      
      <guid>https://ericliu03.github.io/posts/2019/05/lc_975_odd_even_jump/</guid>
      <description>Question Leetcode 975: Odd Even Jump
You are given an integer array A. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, &amp;hellip;) jumps in the series are called odd numbered jumps, and the (2nd, 4th, 6th, &amp;hellip;) jumps in the series are called even numbered jumps.
You may from index i jump forward to index j (with i &amp;lt; j) in the following way:</description>
    </item>
    
  </channel>
</rss>